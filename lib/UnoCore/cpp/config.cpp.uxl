<extensions backend="cplusplus">

    <define REFLECTION="DEBUG_DUMPS" />
    <define DEBUG_NATIVE="O0" />

    <!-- Output configuration -->
    <set bundleDirectory="data" isDefault="true" />
    <set headerDirectory="include" isDefault="true" />
    <set sourceDirectory="src" isDefault="true" />
    <set binaryDirectory="." isDefault="true" />

    <!-- Codegen extensions -->
    <declare typeElement="header.declaration" />
    <declare typeElement="header.include" />
    <declare typeElement="header.import" />
    <declare typeElement="source.declaration" />
    <declare typeElement="source.include" />
    <declare typeElement="source.import" />
    <declare typeProperty="forwardDeclaration" />
    <declare typeProperty="include" />
    <declare typeProperty="typeName" />
    <declare typeProperty="defaultValue" />
    <declare typeProperty="typeofType" />
    <declare typeProperty="typeofFunction" />
    <declare typeProperty="baseType" />
    <declare typeProperty="boxFunction" />
    <declare typeProperty="fileExtension" />
    <declare methodProperty="isIntrinsic" />
    <declare methodProperty="functionName" />

    <!-- File types -->
    <declare element="fontFile" targetDirectory="@(bundleDirectory)" />
    <declare element="headerFile" targetDirectory="@(headerDirectory)" />
    <declare element="sourceFile" targetDirectory="@(sourceDirectory)" />

    <!-- Build extensions -->
    <declare element="includeDirectory" />
    <declare element="linkDirectory" />
    <declare element="linkLibrary" />
    <declare element="preprocessorDefinition" />

    <set cppStandard="c++17" isDefault="true" />
    <set cStandard="c99" isDefault="true" />

    <require preprocessorDefinition="DEBUG_ARC=0" condition="DEBUG_ARC0" />
    <require preprocessorDefinition="DEBUG_ARC=1" condition="DEBUG_ARC1" />
    <require preprocessorDefinition="DEBUG_ARC=2" condition="DEBUG_ARC2" />
    <require preprocessorDefinition="DEBUG_ARC=3" condition="DEBUG_ARC3" />
    <require preprocessorDefinition="DEBUG_ARC=4" condition="DEBUG_ARC4" />
    <require preprocessorDefinition="DEBUG_DUMPS=1" condition="DEBUG_DUMPS" />
    <require preprocessorDefinition="DEBUG_GC=1" condition="DEBUG_GC" />
    <require preprocessorDefinition="DEBUG_UNSAFE=1" condition="DEBUG_UNSAFE" />

    <!-- UnoCore extensions -->
    <declare element="main.include" />
    <declare element="typeObjects.declaration" />
    <declare element="typeObjects.functionPointer" />

    <!-- Native build -->
    <set native.configuration="@(DEBUG_NATIVE:defined:test('Debug', 'Release'))" />

    <!-- Mobile settings -->
    <set mobile.disableStatusbar="@('@(MOBILE:defined) && !@(project.mobile.showStatusbar)':test(1, 0))" />
    <set mobile.disableBatterySaver="@('@(MOBILE:defined) && @(project.mobile.keepAlive)':test(1, 0))" />
    <set mobile.disableBackgroundProcess="@('@(MOBILE:defined) && !@(project.mobile.runsInBackground)':test(1, 0))" />

    <!-- Keywords -->
    <set keywords>
        alignas alignof and and_eq asm auto bitand bitor bool
        break case catch char char16_t char32_t class compl concept
        const constexpr const_cast continue decltype default delete do
        double dynamic_cast else enum explicit export extern false
        float for friend goto if inline int long mutable namespace
        new noexcept not not_eq nullptr operator or or_eq private
        protected public register reinterpret_cast requires return short
        signed sizeof static static_assert static_cast struct switch
        template this thread_local throw true try typedef typeid
        typename union unsigned using virtual void volatile wchar_t
        while xor xor_eq

        NULL alloca calloc malloc realloc free
        int8_t int16_t int32_t int64_t uint8_t uint16_t uint32_t
        uint64_t DBL_MAX DBL_INF DBL_NAN FLT_INF FLT_NAN
        op_Implicit op_Explicit
    </set>

</extensions>
