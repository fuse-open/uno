<extensions backend="cplusplus" condition="ANDROID">
    <using namespace="Android.Base" />
    <using namespace="Android.Base.Wrappers" />
    <using namespace="Android.Base.Primitives" />

    <type name="Android.Base.Wrappers.JWrapper">
        <require header.include="@{Android.Base.JNI:include}" />
        <require header.include="@{Uno.Exception:include}" />

        <require entity="IJWrapper._GetJavaObject()" />
        <require entity="IJWrapper._IsSubclassed()" />

        <require entity="JWrapper(Android.Base.Primitives.ujobject,Uno.Type,bool,bool)" />
        <require entity="JWrapper(Android.Base.Primitives.ujobject,Uno.Type,bool,bool,bool)" />
        <require entity="JWrapper._GetJavaObject()" />
        <require entity="JWrapper._IsSubclassed()" />
        <require entity="JWrapper.SetInternalObj(ujobject,bool)" />
        <require entity="Android.Base.Primitives.ConstCharPtr" />
        <require entity="Android.Base.Primitives.JNIEnvPtr" />
        <require entity="Android.Base.Primitives.jweak" />
        <require entity="Android.Base.Primitives.uweakptr" />
        <require entity="Android.Base.Primitives.ujclass" />
        <require entity="Android.Base.Primitives.ujvalue" />
        <require entity="Android.Base.Primitives.ujobject" />
        <require entity="Android.Base.Primitives.ujstring" />
        <require entity="Android.Base.Primitives.ujboolean" />
        <require entity="Android.Base.Primitives.ujbyte" />
        <require entity="Android.Base.Primitives.ujchar" />
        <require entity="Android.Base.Primitives.ujshort" />
        <require entity="Android.Base.Primitives.ujint" />
        <require entity="Android.Base.Primitives.ujlong" />
        <require entity="Android.Base.Primitives.ujfloat" />
        <require entity="Android.Base.Primitives.ujdouble" />
        <require entity="Android.Base.Primitives.JNINativeMethod" />
        <require entity="Android.Base.Primitives.jmethodID" />
        <require entity="Android.Base.Primitives.jfieldID" />
        <require entity="Android.Base.AndroidBindingMacros" />
        <require entity="JNI.LoadClass(JNIEnvPtr,ConstCharPtr)" />
        <require header.include="@{Android.Base.AndroidBindingMacros:include}" />
        <require header.declaration>
        #define MAYBEPROXIFYARG(NUM,ID,NEW) bool subclassed ## NUM = (!ID) ? false : (@{Android.Base.Wrappers.IJWrapper:of(ID)._IsSubclassed():call()}); jobject _iProx ## NUM = (!ID) ? nullptr : (subclassed ## NUM ? NEW : @{Android.Base.Wrappers.IJWrapper:of(ID)._GetJavaObject():call()});

        #define FREEPROXIED(NUM)if (subclassed ## NUM) { U_JNIVAR->DeleteLocalRef(_iProx ## NUM); }

        #define UNOCALLANDRETURN(CALL) @{Android.Base.Primitives.JNIEnvPtr} _cb_jni = @{Android.Base.JNI.GetEnvPtr():call()};@{Android.Base.Wrappers.JWrapper} _res = (@{Android.Base.Wrappers.JWrapper})CALL;if (_res) { return _cb_jni->NewLocalRef(@{Android.Base.Wrappers.JWrapper:of(_res)._javaObject}); } else { return nullptr; }

        #define NEW_UNO(LINE,RETURNVAR,TYPEOF,UNOTYPE,FALLBACK,RESOLVE) U_JOBJECT tmpRes = LINE; @{Android.Base.JNI.CheckException():call()}; @{long} unoRef = @{Android.Base.JNI.GetUnoRef(Android.Base.Primitives.ujobject):call(tmpRes)}; if (unoRef==0) { RETURNVAR = nullptr; } else if (unoRef>0) { RETURNVAR = (UNOTYPE)uLoadWeak((uWeakObject*)unoRef); @{Android.Base.Primitives.JNIEnvPtr} __cb_jni = @{Android.Base.JNI.GetEnvPtr():call()}; if (__cb_jni->GetObjectRefType(tmpRes)==JNILocalRefType) { __cb_jni->DeleteLocalRef(tmpRes); }} else { RETURNVAR = ((UNOTYPE)@{Android.Base.Wrappers.JWrapper(Android.Base.Primitives.ujobject,Uno.Type,bool,bool):new(tmpRes, (@{Uno.Type})TYPEOF, FALLBACK, RESOLVE)}); }
        </require>

        <method signature="_DisposeJavaObject()">
            <body>

                     if (!@{$$._javaObject}) return;
                     @{JNI.DeleteGlobalRef(ujobject):call(@{$$._javaObject})};
                     @{$$._javaObject} = 0;

            </body>
        </method>

        <method signature="_Init()">
            <body>
if (@{_jlangObjectClass}) { return; }
INIT_JNI;
@{_jlangObjectClass} = NEW_GLOBAL_REF(jclass,LOAD_SYS_CLASS("java/lang/Object"));
@{Android.Base.JNI.CheckException(Android.Base.Primitives.JNIEnvPtr):call(U_JNIVAR)};
if (!@{_jlangObjectClass}) { THROW_UNO_EXCEPTION("Unable to cache class 'java.lang.Object' for JWrapper", 53); }
</body>
        </method>

        <method signature="equals(JWrapper):bool">
            <body>

INIT_JNI;
jobject _obArg2 = ((!$0) ? nullptr : @{Android.Base.Wrappers.IJWrapper:of($0)._GetJavaObject():call()});
CLASS_INIT(@{_jlangObjectClass},@{_Init():call()});
CACHE_METHOD(@{_jlangObjectEqualsMid},@{_jlangObjectClass},"equals","(Ljava/lang/Object;)Z",GetMethodID,"Id for method java.lang.Object.equals could not be cached for jwrapper",79);
@{bool} result = ((@{bool})U_JNIVAR->CallBooleanMethod(@{$$._javaObject}, @{_jlangObjectEqualsMid}, _obArg2));
@{Android.Base.JNI.CheckException(Android.Base.Primitives.JNIEnvPtr):call(U_JNIVAR)};
return result;


            </body>
        </method>

        <method signature="hashCode():int">
            <body>

INIT_JNI;
CLASS_INIT(@{_jlangObjectClass},@{_Init():call()});
CACHE_METHOD(@{_jlangObjectHashCodeMid},@{_jlangObjectClass},"hashCode","()I",GetMethodID,"Id for method java.lang.Object.hashCode could not be cached for jwrapper",81);
@{int} result = ((@{int})U_JNIVAR->CallIntMethod(@{$$._javaObject}, @{_jlangObjectHashCodeMid}));
@{Android.Base.JNI.CheckException(Android.Base.Primitives.JNIEnvPtr):call(U_JNIVAR)};
return result;

            </body>
        </method>

        <require source.declaration>
        bool __JWrapper_WeakCallback(uWeakStateIntercept::Event e, uObject* obj)
        {
            @{Android.Base.JNI.CheckException():call()};
            @{JWrapper} wrapper = (@{JWrapper})obj;
            jobject jobj = @{JWrapper:of(wrapper)._javaObject};
            if (!jobj) return true;

            bool subclassed = @{JWrapper:of(wrapper)._subclassed};

            if (e == uWeakStateIntercept::OnLoad) {
                // retain went from 0 to 1
                if (subclassed) {
                    @{JNIEnvPtr} jni = @{JNI.GetEnvPtr():call()};
                    @{JWrapper:of(wrapper)._javaObject} = jni->NewGlobalRef(jobj);
                    jni->DeleteWeakGlobalRef(jobj);
                    return true;
                } else {
                    return true;
                }
            } else {
                // retain went from 1 to 0
                if (subclassed) {
                    @{JNIEnvPtr} jni = @{JNI.GetEnvPtr():call()};
                    @{JWrapper:of(wrapper)._javaObject} = jni->NewWeakGlobalRef(jobj);
                    jni->DeleteGlobalRef(jobj);
                    return false;
                } else {
                    @{JNIEnvPtr} jni = @{JNI.GetEnvPtr():call()};
                    jni->DeleteGlobalRef(jobj);
                    return true;
                }
            }
            return false;
        }
        </require>
        <require source.declaration>
        bool __JWrapper_Callbacks_Registered = false;
        void __JWrapper_Finalizer(JNIEnv *env , jclass clazz, jlong ptr)
        {
        uWeakObject* weak = (uWeakObject*)ptr;
        uAutoReleasePool pool;
        @{JWrapper} wrapper = (@{JWrapper})uLoadWeak(weak);
        uStoreWeak(&weak, 0);
        }
        void __Register_Finalizer()
        {
            @{JNIEnvPtr} jni = @{JNI.GetEnvPtr():call()};
            JNINativeMethod nativeFunc = {(char* const)"Finalize", (char* const)"(J)V", (void *)&__JWrapper_Finalizer};
            jclass cls = reinterpret_cast<jclass>(jni->NewGlobalRef(@{JNI.LoadClass(JNIEnvPtr,ConstCharPtr):call(@{JNI.GetEnvPtr():call()}, "com.foreign.UnoHelper")}));
            jint attached = @{JNI.GetEnvPtr():call()}->RegisterNatives(cls, &nativeFunc, 1);
            if (attached < 0) {
                U_THROW(@{Uno.Exception(string):new(uString::Utf8("Could not register the instantiation callback function",54))});
            }
        }
        </require>
    </type>

</extensions>
