<extensions backend="cplusplus" condition="LINUX || MSVC">

    <using namespace="Uno.Net.Http.Implementation" />

    <type name="XliHttpClientHandle"
        typeName="::Xli::HttpClient*"
        include="XliHttpClient/HttpClient.h" />

    <type name="XliHttpRequestHandle"
        typeName="::Xli::HttpRequest*"
        include="XliHttpClient/HttpClient.h" />

    <type name="XliHttpMessageHandler">
        <processFile headerFile="XliHttpEventHandler.h" />

        <require source.include="XliHttpClient/HttpClient.h" />
        <require source.include="XliHttpEventHandler.h" />
    </type>

    <type name="XliHttpRequest">
        <require template="XliHttpClient" />

        <require source.include="XliHttpClient/HttpClient.h" />

        <method signature="GetResponseHeader(string):string">
            <body>
                uBase::String result;
                if (@{$$._requestHandle}->TryGetResponseHeader(uCString($0).Ptr, result))
                    return uString::Utf8(result.Ptr());
                else
                    return nullptr;
            </body>
        </method>

        <method signature="GetResponseHeaders():string">
            <body>
                Xli::HttpRequest* req = @{$$._requestHandle};
                uBase::String result = "";
                bool first = true;
                for (int it = req->ResponseHeadersBegin(); it != req->ResponseHeadersEnd(); it = req->ResponseHeadersNext(it))
                {
                    if (!first) result += "\n";
                    first = false;
                    result += req->GetResponseHeaderKey(it);
                    result += ":";
                    result += req->GetResponseHeaderValue(it);
                }

                return uString::Utf8(result.Ptr());
            </body>
        </method>
    </type>

</extensions>
